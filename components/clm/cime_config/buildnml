<<<<<<< HEAD
#! /usr/bin/env perl
use strict;
use Cwd;

if ($#ARGV == -1) {
    die " ERROR clm.buildexe: must specify a caseroot input argument";
}
my ($CASEROOT) = @ARGV;
chdir "${CASEROOT}";

my $CIMEROOT            = `./xmlquery  CIMEROOT            -value`;
my $SRCROOT             = `./xmlquery  SRCROOT             -value`;
my $COMPSET	        = `./xmlquery  COMPSET	           -value`;
my $CCSM_CO2_PPMV	= `./xmlquery  CCSM_CO2_PPMV	   -value`;
my $CLM_CO2_TYPE	= `./xmlquery  CLM_CO2_TYPE	   -value`;
my $CLM_USRDAT_NAME	= `./xmlquery  CLM_USRDAT_NAME	   -value`;
my $CLM_CONFIG_OPTS	= `./xmlquery  CLM_CONFIG_OPTS	   -value`;
my $CLM_NAMELIST_OPTS	= `./xmlquery  CLM_NAMELIST_OPTS   -value`;
my $CLM_BLDNML_OPTS	= `./xmlquery  CLM_BLDNML_OPTS	   -value`;
my $CLM_NML_USE_CASE	= `./xmlquery  CLM_NML_USE_CASE	   -value`;
my $CLM_ACCELERATED_SPINUP = `./xmlquery  CLM_ACCELERATED_SPINUP -value`;
my $CLM_FORCE_COLDSTART = `./xmlquery  CLM_FORCE_COLDSTART -value`;
my $CLM_INTERFACE_MODE = `./xmlquery  CLM_INTERFACE_MODE -value`;
my $COMP_INTERFACE	= `./xmlquery  COMP_INTERFACE	   -value`;
my $COMP_GLC		= `./xmlquery  COMP_GLC		   -value`;
my $DEBUG		= `./xmlquery  DEBUG		   -value`;
my $DIN_LOC_ROOT	= `./xmlquery  DIN_LOC_ROOT	   -value`;
my $GLC_NEC		= `./xmlquery  GLC_NEC		   -value`;
my $LND_GRID		= `./xmlquery  LND_GRID		   -value`;
my $LND_NCPL		= `./xmlquery  LND_NCPL		   -value`;
my $LND_DOMAIN_PATH	= `./xmlquery  LND_DOMAIN_PATH	   -value`;
my $LND_DOMAIN_FILE	= `./xmlquery  LND_DOMAIN_FILE	   -value`;
my $MASK_GRID		= `./xmlquery  MASK_GRID	   -value`;
my $NTHRDS_LND		= `./xmlquery  NTHRDS_LND	   -value`;
my $NTASKS_LND		= `./xmlquery  NTASKS_LND	   -value`;
my $NINST_LND		= `./xmlquery  NINST_LND	   -value`;
my $RUNDIR		= `./xmlquery  RUNDIR		   -value`;
my $RUN_TYPE		= `./xmlquery  RUN_TYPE		   -value`;
my $RUN_STARTDATE	= `./xmlquery  RUN_STARTDATE	   -value`;
my $RUN_REFCASE		= `./xmlquery  RUN_REFCASE	   -value`;
my $RUN_REFDATE		= `./xmlquery  RUN_REFDATE	   -value`;
my $RUN_REFTOD		= `./xmlquery  RUN_REFTOD	   -value`;

my @dirs = ("${CIMEROOT}/utils/perl5lib");
unshift @INC, @dirs;
require Config::SetupTools;
my $sysmod; 

if (! -d "$CASEROOT/Buildconf/clmconf" ) {
    $sysmod = "mkdir $CASEROOT/Buildconf/clmconf";
    system($sysmod) == 0 or die "ERROR clm.buildnml: $sysmod failed: $?\n";
}
chdir "$CASEROOT/Buildconf/clmconf";

#--------------------------------------------------------------------
# Invoke clm configure - output will go in CASEROOT/Buildconf/clmconf
#--------------------------------------------------------------------

# The following translation is hard-wired for backwards compatibility
# to support the differences between how the scripts specify the land grid
# and how it is specified internally
if ($LND_GRID eq 'T31' ) {$LND_GRID = '48x96'};
if ($LND_GRID eq 'T42' ) {$LND_GRID = '64x128'};
if ($LND_GRID eq 'T85' ) {$LND_GRID = '128x256'};
if ($LND_GRID eq 'T341') {$LND_GRID = '512x1024'};

my $config_opts;
my $resolution;
my $clmusr;
if ($MASK_GRID ne "reg") {
    $config_opts = " ";
    $resolution = $LND_GRID;
    $clmusr     = "";
}
if (($MASK_GRID eq "reg") && ($LND_GRID ne "CLM_USRDAT" )) {
    $config_opts = "-sitespf_pt $LND_GRID";
    $resolution  = $LND_GRID ;
    $clmusr      = "";
}
if ( $LND_GRID eq "CLM_USRDAT" ) {
    $config_opts=" ";
    $resolution = $CLM_USRDAT_NAME;
    $clmusr     = " -clm_usr_name $CLM_USRDAT_NAME";
}
if ("$COMPSET" =~ /1PT.*/ ) {
    $config_opts = " -sitespf_pt reg";
}

$sysmod = "$SRCROOT/components/clm/bld/configure";
$sysmod = "$sysmod  $config_opts -comp_intf $COMP_INTERFACE ";
$sysmod = "$sysmod  $CLM_CONFIG_OPTS ";
$sysmod = "$sysmod -usr_src $CASEROOT/SourceMods/src.clm";
system($sysmod) == 0 or die "ERROR clm.buildnml: $sysmod failed: $?\n";

#--------------------------------------------------------------------
# Invoke clm build-namelist - output will go in CASEROOT/Buildconf/clmconf
#--------------------------------------------------------------------

# adding ad_spinup into $CLM_BLDNML_OPTS, if not yet AND for supported compset and options
my $ad_opt = " -bgc_spinup";
my $bldnml_opts = $CLM_BLDNML_OPTS;
if ( ($CLM_ACCELERATED_SPINUP eq "on") && (index($bldnml_opts, $ad_opt) == -1) ) { 
  $ad_opt = " -bgc_spinup on"; 
  if ( (index($COMPSET, "1850") != -1) && 
       ((index($bldnml_opts, "-bgc cn") != -1) || (index($bldnml_opts, "-bgc bgc") != -1)) ) {
    $CLM_BLDNML_OPTS = $bldnml_opts.$ad_opt;
    print "INFO - edited CLM_BLDNML_OPTS: ".$CLM_BLDNML_OPTS."\n";
  } else {
    print "WARNING: ".$ad_opt."NOT VALID for compset".$COMPSET.", OR CLM_BLDNML_OPTS".$bldnml_opts."\n";
  }
} else {
  if ( ($CLM_ACCELERATED_SPINUP eq "on") && (index($bldnml_opts, $ad_opt) != -1) ) {
    print "WARNING: cannot over-ride CLM_BLDNML_OPTS: ".$CLM_BLDNML_OPTS."\n";
  }
}

my $startfiletype = "finidat";
my $start_type = "default";
if ($RUN_TYPE eq "startup" ) {
    if ($CLM_FORCE_COLDSTART eq "on") {$start_type = "cold";}
} else {
    if ($RUN_TYPE eq "hybrid" ) {
	$start_type = "startup";
    } else {
	$start_type = $RUN_TYPE;
    }
}
if ($RUN_TYPE eq "branch" ) {$startfiletype = "nrevsn";}

# adding clm_interface_mode into $CLM_BLDNML_OPTS, for supported compset and options
my $interface_opt = " -clm_interface_mode";
my $bldnml_opts = $CLM_BLDNML_OPTS;
if ( ($CLM_INTERFACE_MODE ne "off") && (index($bldnml_opts, $interface_opt) == -1) ) { 
   $interface_opt = " -clm_interface_mode ".$CLM_INTERFACE_MODE;     
   if (index($COMPSET, "CLM45") != -1) {
      $CLM_BLDNML_OPTS = $bldnml_opts.$interface_opt;
      print "INFO - ' ".$interface_opt."' added into CLM_BLDNML_OPTS: ".$CLM_BLDNML_OPTS."\n";  
   } else {
    print "WARNING: ".$interface_opt."NOT VALID for compset".$COMPSET."\n";
   }
} else {
  if ( ($CLM_INTERFACE_MODE ne "off") && (index($bldnml_opts, $interface_opt) != -1) ) {
    print "WARNING: cannot over-ride CLM_BLDNML_OPTS: ".$CLM_BLDNML_OPTS."\n";
  }
}

my $inst_string;
my $inst_counter = 1;
while ($inst_counter <= $NINST_LND) {

    # -----------------------------------------------------
    # determine instance string 
    # -----------------------------------------------------

    $inst_string = "";       
    if ($NINST_LND > 1) {
	$inst_string = `printf _%04d $inst_counter`;

	# If multi-instance case does not have restart file, use single-case restart
	# for each instance
	if ( (! -e "$RUNDIR/rpointer.lnd${inst_string}") && (-e "$RUNDIR/rpointer.lnd") ) {
	    $sysmod = "cp -v $RUNDIR/rpointer.lnd $RUNDIR/rpointer.lnd${inst_string}";
	    system($sysmod) == 0 or die "ERROR clm.buildnml: $sysmod failed: $?\n";
	}
    }

    # -----------------------------------------------------
    # create clmconf/namelist
    # -----------------------------------------------------

    if ( -e "$CASEROOT/Buildconf/clm.input_data_list" ) {
	$sysmod = "rm $CASEROOT/Buildconf/clm.input_data_list";
	system($sysmod) == 0 or die "ERROR clm.buildnml: $sysmod failed: $?\n";
    }
    my $clmicfile;
    my $clm_startfile;
    if (( $RUN_TYPE eq "hybrid") || ($RUN_TYPE eq "branch" )) {
	$clm_startfile = "${RUN_REFCASE}.clm2${inst_string}.r.${RUN_REFDATE}-${RUN_REFTOD}.nc";
	if ( -e "$RUNDIR/$clm_startfile") {
	    $clm_startfile = "$clm_startfile";
	} else {
	    $clm_startfile = "${RUN_REFCASE}.clm2.r.${RUN_REFDATE}-${RUN_REFTOD}.nc";
	}
	$clmicfile = " $startfiletype = \'$clm_startfile\'";
    }

    my $infile_text = "";
    if ($clmicfile) {$infile_text .= "$startfiletype = \'$clm_startfile\' \n"; }

    SetupTools::create_namelist_infile("$CASEROOT", 
				       "$CASEROOT/user_nl_clm${inst_string}", 
				       "$CASEROOT/Buildconf/clmconf/namelist", 
				       "$infile_text");

    # -----------------------------------------------------
    # call build-namelist
    # -----------------------------------------------------

    my $glc_opts = "";
    if ("$COMP_GLC" ne "sglc" ) {
        my $GLC_SMB		= lc `cd $CASEROOT; ./xmlquery  GLC_SMB		   -value`;
        $glc_opts = "-glc_present -glc_smb .$GLC_SMB. ";
    }

    my $usecase = " ";
    if ($CLM_NML_USE_CASE ne "UNSET") {$usecase = "-use_case $CLM_NML_USE_CASE";}

    my $start_ymd = `echo $RUN_STARTDATE | sed s/-//g`;
    my $ignore = "-ignore_ic_date";
    if (($RUN_STARTDATE =~ /.*-01-01.*/) || ($RUN_STARTDATE =~ /.*-09-01.*/)) {	$ignore = "-ignore_ic_year";}

    $sysmod = "$SRCROOT/components/clm/bld/build-namelist -infile $CASEROOT/Buildconf/clmconf/namelist ";
    $sysmod = "$sysmod -csmdata $DIN_LOC_ROOT -inputdata $CASEROOT/Buildconf/clm.input_data_list $ignore"; 
    $sysmod = "$sysmod -namelist \" \&clm_inparm  start_ymd=$start_ymd $CLM_NAMELIST_OPTS \/\"";
    $sysmod = "$sysmod $usecase $glc_opts -res $resolution $clmusr -clm_start_type $start_type";
    $sysmod = "$sysmod -envxml_dir $CASEROOT -l_ncpl $LND_NCPL -lnd_frac ${LND_DOMAIN_PATH}/${LND_DOMAIN_FILE}";
    $sysmod = "$sysmod -glc_nec $GLC_NEC -co2_ppmv $CCSM_CO2_PPMV -co2_type $CLM_CO2_TYPE ";
    $sysmod = "$sysmod -config $CASEROOT/Buildconf/clmconf/config_cache.xml $CLM_BLDNML_OPTS";
    if ($MASK_GRID ne "reg") {
      $sysmod = "$sysmod -mask $MASK_GRID";
    }
    system($sysmod) == 0 or die "ERROR clm.buildnml: $sysmod failed: $?\n";
=======
#! /usr/bin/env python

"""
Namelist creator for E3SM's CLM component
"""

import os, sys

_CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","cime")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd_no_fail, safe_copy
from CIME.buildnml import create_namelist_infile, parse_input

logger = logging.getLogger(__name__)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    expect(compname == "clm", compname)

    os.chdir(caseroot)

    srcroot             = case.get_value("SRCROOT")
    compset             = case.get_value("COMPSET")
    ccsm_co2_ppmv       = case.get_value("CCSM_CO2_PPMV")
    clm_co2_type        = case.get_value("CLM_CO2_TYPE")
    clm_usrdat_name     = case.get_value("CLM_USRDAT_NAME")
    clm_config_opts     = case.get_value("CLM_CONFIG_OPTS")
    clm_namelist_opts   = case.get_value("CLM_NAMELIST_OPTS")
    clm_bldnml_opts     = case.get_value("CLM_BLDNML_OPTS")
    clm_nml_use_case    = case.get_value("CLM_NML_USE_CASE")
    clm_force_coldstart = case.get_value("CLM_FORCE_COLDSTART")
    clm_ad_spinup       = case.get_value("CLM_ACCELERATED_SPINUP")
    clm_interface_mode  = case.get_value("CLM_INTERFACE_MODE")
    comp_interface      = case.get_value("COMP_INTERFACE")
    comp_glc            = case.get_value("COMP_GLC")
    din_loc_root        = case.get_value("DIN_LOC_ROOT")
    glc_nec             = case.get_value("GLC_NEC")
    lnd_grid            = case.get_value("LND_GRID")
    lnd_ncpl            = case.get_value("LND_NCPL")
    lnd_domain_path     = case.get_value("LND_DOMAIN_PATH")
    lnd_domain_file     = case.get_value("LND_DOMAIN_FILE")
    mask_grid           = case.get_value("MASK_GRID")
    ninst_lnd           = case.get_value("NINST_LND")
    rundir              = case.get_value("RUNDIR")
    run_type            = case.get_value("RUN_TYPE")
    run_startdate       = case.get_value("RUN_STARTDATE")
    run_refcase         = case.get_value("RUN_REFCASE")
    run_refdate         = case.get_value("RUN_REFDATE")
    run_reftod          = case.get_value("RUN_REFTOD")
    casebuild		= case.get_value("CASEBUILD")

    clmconf_dir = os.path.join(casebuild, "clmconf")

    if not os.path.isdir(clmconf_dir): os.mkdir(clmconf_dir)

    #--------------------------------------------------------------------
    # Invoke clm configure - output will go in CASEROOT/Buildconf/clmconf
    #--------------------------------------------------------------------

    # The following translation is hard-wired for backwards compatibility
    # to support the differences between how the scripts specify the land grid
    # and how it is specified internally

    if lnd_grid == 'T31':  lnd_grid = "48x96"
    if lnd_grid == 'T42':  lnd_grid = "64x128"
    if lnd_grid == 'T85':  lnd_grid = "128x256"
    if lnd_grid == 'T341': lnd_grid = "512x1024"


    config_opts = ""
    resolution = ""
    clmusr = ""
    if mask_grid != "reg":
        config_opts = " "
        resolution = lnd_grid
        clmusr     = ""

    if mask_grid == "reg" and lnd_grid != "CLM_USRDAT":
        config_opts = "-sitespf_pt {}".format(lnd_grid)
        resolution  = lnd_grid
        clmusr      = ""

    if lnd_grid == "CLM_USRDAT":
        config_opts = " "
        resolution = clm_usrdat_name
        clmusr     = " -clm_usr_name {}".format(clm_usrdat_name)

    if "1PT" in compset:
        config_opts = " -sitespf_pt reg"

    # TODO: clm/bld/configure needs to be converted to python
    sysmod = "{}/components/clm/bld/configure".format(srcroot)
    sysmod += "  {} -comp_intf {} {}".format(config_opts, comp_interface, clm_config_opts)
    sysmod += " -usr_src {}/SourceMods/src.clm".format(caseroot)
    run_cmd_no_fail(sysmod, from_dir=clmconf_dir)

    #--------------------------------------------------------------------
    # Invoke clm build-namelist - output will go in CASEROOT/Buildconf/clmconf
    #--------------------------------------------------------------------

    startfiletype = "finidat"
    start_type = "default"
    if run_type == "startup":
        if clm_force_coldstart == "on": start_type = "cold"
    else:
        if run_type == "hybrid":
            start_type = "startup"
        else:
            start_type = run_type

    if run_type == "branch": startfiletype = "nrevsn"
>>>>>>> master
    
    # adding ad_spinup into $CLM_BLDNML_OPTS, if not yet AND for supported compset and options   
    ad_spinup = " -bgc_spinup on"
    if clm_ad_spinup == "on" \
       and ad_spinup not in clm_bldnml_opts and "1850" in compset:
        clm_bldnml_opts = clm_bldnml_opts + ad_spinup
    
    # adding clm_interface_mode into $CLM_BLDNML_OPTS
    if clm_interface_mode != "off" and "-clm_interface_mode" not in clm_bldnml_opts:
        clm_bldnml_opts = clm_bldnml_opts + " -clm_interface_mode " + clm_interface_mode

    inst_string = ""
    for inst_counter in range(1, ninst_lnd + 1):

        # -----------------------------------------------------
        # determine instance string
        # -----------------------------------------------------

        inst_string = ""
        if ninst_lnd > 1:
            inst_string = "{0:04d}".format(inst_counter)

            # If multi-instance case does not have restart file, use single-case restart
            # for each instance
            if not os.path.exists(os.path.join(rundir, "rpointer.lnd{}".format(inst_string))) and \
                   os.path.exists(os.path.join(rundir, "rpointer.lnd")):
                safe_copy(os.path.join(rundir, "rpointer.lnd"),
                          os.path.join(rundir, "rpointer.lnd{}".format(inst_string)))


        # -----------------------------------------------------
        # create clmconf/namelist
        # -----------------------------------------------------

        if os.path.exists("{}/Buildconf/clm.input_data_list".format(caseroot)):
            os.remove("{}/Buildconf/clm.input_data_list".format(caseroot))

        clmicfile = ""
        clm_startfile = ""
        if run_type == "hybrid" or run_type == "branch":
            clm_startfile = "{}.clm2{}.r.{}-{}.nc".format(run_refcase, inst_string, run_refdate, run_reftod)
            if not os.path.exists(os.path.join(rundir, clm_startfile)):
                clm_startfile = "{}.clm2.r.{}-{}.nc".format(run_refcase, run_refdate, run_reftod)

            clmicfile = " {} = '{}'".format(startfiletype, clm_startfile)

        infile_text = ""
        if clmicfile: infile_text = "{} = '{}' \n".format(startfiletype, clm_startfile)

        create_namelist_infile(case,
                               "{}/user_nl_clm{}".format(caseroot, inst_string),
                               "{}/namelist".format(clmconf_dir),
                               infile_text=infile_text)

        # -----------------------------------------------------
        # call build-namelist
        # -----------------------------------------------------

        glc_opts = ""
        if comp_glc != "sglc":
            glc_smb = str(case.get_value("GLC_SMB")).lower()
            glc_opts = "-glc_present -glc_smb .{}. ".format(glc_smb)

        usecase = " "
        if clm_nml_use_case != "UNSET": usecase = "-use_case {}".format(clm_nml_use_case)

        start_ymd = run_startdate.replace("-", "")
        ignore = "-ignore_ic_year" if ("-01-01" in run_startdate or "-09-01" in run_startdate) else "-ignore_ic_date"

        sysmod =  "{}/components/clm/bld/build-namelist -infile {}/Buildconf/clmconf/namelist ".format(srcroot, caseroot)
        sysmod += " -csmdata {} -inputdata {}/Buildconf/clm.input_data_list {}".format(din_loc_root, caseroot, ignore)
        sysmod += ' -namelist " &clm_inparm  start_ymd={} {} /"'.format(start_ymd, clm_namelist_opts)
        sysmod += " {} {} -res {} {} -clm_start_type {}".format(usecase, glc_opts, resolution, clmusr, start_type)
        sysmod += " -envxml_dir {} -l_ncpl {} -lnd_frac {}/{}".format(caseroot, lnd_ncpl, lnd_domain_path, lnd_domain_file)
        sysmod += " -glc_nec {} -co2_ppmv {} -co2_type {} ".format(glc_nec, ccsm_co2_ppmv, clm_co2_type)
        sysmod += " -config {}/config_cache.xml {}".format(clmconf_dir, clm_bldnml_opts)
        if mask_grid != "reg":
            sysmod += " -mask {}".format(mask_grid)

        # TODO: clm/bld/build-namelist needs to be converted to python
        run_cmd_no_fail(sysmod, from_dir=clmconf_dir)

        # -----------------------------------------------------
        # move lnd_in to $RUNDIR
        # -----------------------------------------------------

        if os.path.isdir(rundir):
            safe_copy(os.path.join(clmconf_dir, "lnd_in"), os.path.join(rundir, "lnd_in{}".format(inst_string)))

	# Only copy drv_flds_in namelist file if one doesn't already exist
        if not os.path.exists(os.path.join(rundir, "drv_flds_in")) and os.path.exists(os.path.join(clmconf_dir, "drv_flds_in")):
            safe_copy(os.path.join(clmconf_dir, "drv_flds_in"), os.path.join(rundir, "drv_flds_in"))

###############################################################################
def _main_func():
###############################################################################
    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "clm")

if __name__ == "__main__":
    _main_func()
